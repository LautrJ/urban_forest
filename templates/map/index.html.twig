{% extends 'base.html.twig' %}

{% block title %}Carte des arbres{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endblock %}

{% block body %}
    <div class="map-header">
        <h1>üó∫Ô∏è Carte des arbres urbains</h1>
    </div>

    <div class="map-filters">
        <div class="filters-grid">
            <div class="filter-section search-box">
                <h3>Rechercher un lieu</h3>
                <input
                        type="text"
                        id="search-input"
                        placeholder="Ville, adresse..."
                >
                <button class="btn-search" onclick="searchLocation()">
                    üîç Rechercher
                </button>
                <button class="btn-locate" onclick="geolocateUser()">
                    üìç Ma position
                </button>
            </div>

            <div class="filter-section">
                <h3>Filtres</h3>
                <div class="filter-checkboxes">
                    <label>
                        <input type="checkbox" id="filter-trees" checked onchange="toggleLayer('trees')">
                        <span>Arbres recens√©s ({{ trees|length }})</span>
                    </label>

                    {% if requests|length > 0 %}
                        <label>
                            <input type="checkbox" id="filter-requests" checked onchange="toggleLayer('requests')">
                            <span>Demandes en attente ({{ requests|length }})</span>
                        </label>
                    {% endif %}
                </div>
            </div>

            <div class="filter-section">
                <h3>L√©gende</h3>
                <div class="legend-items">
                    <div class="legend-item">
                        <div class="legend-icon icon-tree"></div>
                        <span>Arbre recens√©</span>
                    </div>
                    {% if requests|length > 0 %}
                        <div class="legend-item">
                            <div class="legend-icon icon-request"></div>
                            <span>Demande en attente</span>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <div class="map-container">
        <div id="map"></div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        const treesData = {{ trees|json_encode|raw }};
        const requestsData = {{ requests|json_encode|raw }};

        const map = L.map('map').setView([48.8566, 2.3522], 13);

        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        }).addTo(map);

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const userLat = position.coords.latitude;
                    const userLng = position.coords.longitude;

                    const userIcon = L.divIcon({
                        className: 'user-location-marker',
                        html: '<div style="background-color: #4285f4; width: 18px; height: 18px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.4);"></div>',
                        iconSize: [18, 18],
                        iconAnchor: [9, 9]
                    });

                    L.marker([userLat, userLng], { icon: userIcon })
                        .bindPopup('üìç Vous √™tes ici')
                        .addTo(map);

                    if (treesData.length === 0 && requestsData.length === 0) {
                        map.setView([userLat, userLng], 15);
                    }
                },
                function(error) {
                    console.log('G√©olocalisation non disponible ou refus√©e');
                }
            );
        }

        const treesLayer = L.layerGroup().addTo(map);
        const coolZonesLayer = L.layerGroup().addTo(map);
        const requestsLayer = L.layerGroup().addTo(map);

        const treeIcon = L.divIcon({
            className: 'custom-marker',
            html: `<div style="background-color: var(--forest-light); width: 30px; height: 30px; border-radius: 50%; border: 3px solid #1a4d2e; display: flex; align-items: center; justify-content: center; font-size: 18px;">üå≥</div>`,
            iconSize: [30, 30],
            iconAnchor: [15, 15],
            popupAnchor: [0, -15]
        });

        const requestIcon = L.divIcon({
            className: 'custom-marker',
            html: `<div style="background-color: #ffc107; width: 30px; height: 30px; border-radius: 50%; border: 3px solid #856404; display: flex; align-items: center; justify-content: center; font-size: 18px;">‚è≥</div>`,
            iconSize: [30, 30],
            iconAnchor: [15, 15],
            popupAnchor: [0, -15]
        });

        treesData.forEach(tree => {
            const coolZoneRadius = tree.environmental.coolZoneRadius;

            if (coolZoneRadius > 0) {
                const circle = L.circle([tree.latitude, tree.longitude], {
                    color: '#52b788',
                    fillColor: '#52b788',
                    fillOpacity: 0.15,
                    radius: coolZoneRadius,
                    weight: 2,
                    opacity: 0.5
                });

                circle.addTo(coolZonesLayer);
            }

            const marker = L.marker([tree.latitude, tree.longitude], { icon: treeIcon });

            const env = tree.environmental;
            const popupContent = `
                <div class="popup-header">${tree.treeType.commonName}</div>
                <div class="popup-detail"><em>${tree.treeType.scientificName}</em></div>
                ${tree.age ? `<div class="popup-detail"><strong>√Çge :</strong> ${tree.age} ans${env.isMature ? ' ‚úì (mature)' : ''}</div>` : ''}

                <div style="margin-top: 0.75rem; padding-top: 0.75rem; border-top: 1px solid #ddd;">
                    <div style="font-weight: 600; margin-bottom: 0.5rem; color: var(--forest-dark);">üìä Impact environnemental</div>
                    <div class="popup-detail">üå± CO2 captur√© : <strong>${env.carbonStorage} kg/an</strong></div>
                    <div class="popup-detail">‚ùÑÔ∏è Zone fra√Æcheur : <strong>${env.coolZoneRadius}m de rayon</strong></div>
                    ${env.maturityPercentage ? `<div class="popup-detail">üìà Maturit√© : <strong>${env.maturityPercentage}%</strong></div>` : ''}
                    ${env.allergyPotential ? `<div class="popup-detail">ü§ß Allergie : <strong>${env.allergyPotential}</strong></div>` : ''}
                    ${env.resilience ? `<div class="popup-detail">üí™ R√©silience : <strong>${env.resilience}</strong></div>` : ''}
                </div>

                ${tree.contributor ? `<div class="popup-detail" style="margin-top: 0.5rem;">Recens√© par : ${tree.contributor.name}</div>` : '<div class="popup-detail" style="margin-top: 0.5rem;">Recens√© par : Municipalit√©</div>'}
                <span class="popup-badge badge-validated">${tree.status.label}</span>
            `;

            marker.bindPopup(popupContent);
            marker.addTo(treesLayer);
        });

        requestsData.forEach(request => {
            const marker = L.marker([request.latitude, request.longitude], { icon: requestIcon });

            const popupContent = `
                <div class="popup-header">Demande de recensement</div>
                ${request.proposedTreeType ? `<div class="popup-detail">${request.proposedTreeType.commonName}</div>` : '<div class="popup-detail"><em>Essence √† identifier</em></div>'}
                ${request.estimatedAge ? `<div class="popup-detail">√Çge estim√© : ${request.estimatedAge} ans</div>` : ''}
                <div class="popup-detail">Par : ${request.citizen.name}</div>
                <span class="popup-badge badge-pending">En attente de validation</span>
            `;

            marker.bindPopup(popupContent);
            marker.addTo(requestsLayer);
        });

        const allMarkers = [...treesData, ...requestsData];
        if (allMarkers.length > 0) {
            const bounds = L.latLngBounds(
                allMarkers.map(item => [item.latitude, item.longitude])
            );
            map.fitBounds(bounds, { padding: [50, 50] });
        }

        function toggleLayer(layerType) {
            if (layerType === 'trees') {
                if (map.hasLayer(treesLayer)) {
                    map.removeLayer(treesLayer);
                } else {
                    map.addLayer(treesLayer);
                }
            } else if (layerType === 'coolZones') {
                if (map.hasLayer(coolZonesLayer)) {
                    map.removeLayer(coolZonesLayer);
                } else {
                    map.addLayer(coolZonesLayer);
                }
            } else if (layerType === 'requests') {
                if (map.hasLayer(requestsLayer)) {
                    map.removeLayer(requestsLayer);
                } else {
                    map.addLayer(requestsLayer);
                }
            }
        }

        async function searchLocation() {
            const query = document.getElementById('search-input').value;
            if (!query) {
                alert('Veuillez entrer un lieu √† rechercher');
                return;
            }

            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=1`);
                const data = await response.json();

                if (data.length > 0) {
                    const lat = parseFloat(data[0].lat);
                    const lon = parseFloat(data[0].lon);
                    map.setView([lat, lon], 14);

                    L.marker([lat, lon])
                        .bindPopup(`üìç ${data[0].display_name}`)
                        .addTo(map)
                        .openPopup();
                } else {
                    alert('Lieu non trouv√©. Essayez avec un autre nom.');
                }
            } catch (error) {
                alert('Erreur lors de la recherche. Veuillez r√©essayer.');
            }
        }

        function geolocateUser() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;
                        map.setView([lat, lng], 15);
                    },
                    function(error) {
                        alert('Impossible d\'obtenir votre position. Veuillez autoriser la g√©olocalisation.');
                    }
                );
            } else {
                alert('La g√©olocalisation n\'est pas support√©e par votre navigateur.');
            }
        }

        document.getElementById('search-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchLocation();
            }
        });
    </script>
{% endblock %}